<?xml version="1.0"?>
<class edition="Fall 2018">
  <!--

Print students' names

xmlstarlet sel -t -m "//student" -s A:T:U @lname -v @lname -o ", " -v @fname -n roster.xml

Print comma-separated unis
xmlstarlet sel -t -m "//student" -s A:T:U @uni -v @uni -o "@columbia.edu," roster.xml

Print project names with TAs

xmlstarlet sel -t -m "//team" -s A:T:U @name -v @ta -o "  " -v @name -n roster.xml

Print students with no hw2 attribute

xmlstarlet sel -t -m "//student[not(@hw2)]" -v @fname -o " " -v @lname -n roster.xml

Add an attribute to each student

xmlstarlet ed -i "//student" -t attr -n final roster.xml

Export to csv

xmlstarlet tr ../../roster2csv.xsl roster.xml

UNIs and grades

xmlstarlet sel -t -m "//student" -s A:T:U @uni -v @uni -o "," -v @grade -n roster.xml

Print expected final report filenames

xmlstarlet sel -t -m "//team" -s A:T:U @name -v @name -o ".pdf" -n -v @name -o "-presentation.pdf" -n -v @name -o ".tar.gz" -n roster.xml

Print Name, email, and unis (import to gradescope"

echo "Full Name,Email,UNI" && xmlstarlet sel -t -m "//student" -s A:T:U @lname -v @fname -o " " -v @lname -o "," -v @uni -o "@columbia.edu," -v @uni -n roster.xml



  -->
  <classtime time="Mondays and Wednesdays 4:10 - 5:25 PM" location="451 CSB"/>
  <staff>
    <member name="Prof. Stephen A. Edwards" email="sedwards@cs.columbia.edu" hours="see my home page" location="462 CSB"/>
    <member name="John Hui" email="jzh2106@columbia.edu" hours="T 3:30-5:30" location="487 CSB"/>
    <member name="Jennifer Bi" email="jb3495@columbia.edu" hours="M 2-4" location="487 CSB"/>
    <member name="Mark Mazel" email="mm4764@columbia.edu" hours="Th 5-7" location="487 CSB"/>
    <member name="Lauren Arnett" email="lba2138@columbia.edu" hours="M 10-12" location="487 CSB"/>
    <member name="Dean Deng" email="dd2563@columbia.edu" hours="Th 3-5" location="487 CSB"/>
    <member name="Justin Wong" email="jw3354@columbia.edu" hours="T 12-2" location="487 CSB"/>
    <!--    <member name="" email=""
	    hours="" location=""/> -->
  </staff>
  <schedule>
    <day num="1" date="Wed Sep 5"/>
    <day num="2" date="Mon Sep 10"/>
    <day num="3" date="Wed Sep 12"/>
    <day num="4" date="Mon Sep 17"/>
    <day num="5" date="Wed Sep 19"/>
    <day num="6" date="Mon Sep 24"/>
    <day num="7" date="Wed Sep 26"/>
    <day num="8" date="Mon Oct 1"/>
    <day num="9" date="Wed Oct 3"/>
    <day num="10" date="Mon Oct 8"/>
    <day num="11" date="Wed Oct 10"/>
    <day num="11a" date="Thu Oct 11"/>
    <day num="12" date="Mon Oct 15"/>
    <day event="Midterm Exam" date="Wed Oct 17"/>
    <day num="13" date="Mon Oct 22"/>
    <day num="14" date="Wed Oct 24"/>
    <day num="15" date="Mon Oct 29"/>
    <day num="16" date="Wed Oct 31"/>
    <day event="Election Day Holiday" date="Mon Nov 5"/>
    <day num="17" date="Wed Nov 7"/>
    <day num="18" date="Mon Nov 12"/>
    <day num="19" date="Wed Nov 14"/>
    <day num="20" date="Mon Nov 19"/>
    <day event="Thanksgiving Holiday" date="Wed Nov 21"/>
    <day num="21" date="Mon Nov 26"/>
    <day num="22" date="Wed Nov 28"/>
    <day num="23" date="Mon Dec 3"/>
    <day num="23a" date="Tue Dec 4"/>
    <day num="24" date="Wed Dec 5"/>
    <day event="Final Exam" date="Mon Dec 10"/>
    <day event="Project Reports Due" date="Wed Dec 19"/>
    <lecture day="1" session="1" pdf="intro" reading="Ch 1, 2">Intro. to Languages</lecture>
    <lecture day="2" session="2" pdf="processors" reading="Ch. 2">Language Processors</lecture>
    <lecture day="3" session="3" pdf="projects">Some Outstanding Projects</lecture>
    <lecture day="4" session="4" pdf="ocaml">Programming in OCaml</lecture>
    <lecture day="5" session="5">"</lecture>
    <lecture day="6" session="6">"</lecture>
    <lecture day="7" session="7" pdf="syntax" reading="Ch. 3, 4">Syntax and Parsing</lecture>
    <lecture day="8" session="8">"</lecture>
    <lecture day="9" session="9" pdf="parsing">Guest: Prof. Ray</lecture>
    <lecture day="10" session="10">"</lecture>
    <lecture day="11" session="11">"</lecture>
    <lecture day="11a">(turn in homework only)</lecture>
    <lecture day="12" session="12" pdf="midterm-review">Review for Midterm</lecture>
    <lecture day="13" session="13" pdf="microc" reading="App. A">The MicroC Compiler</lecture>
    <lecture day="14" session="14">"</lecture>
    <lecture day="15" session="15">"</lecture>
    <lecture day="16" session="16">"</lecture>
    <lecture day="17" session="17" pdf="runtime" reading="Ch. 7">Runtime Environments</lecture>
    <lecture day="18" session="18">"</lecture>
    <lecture day="19" session="19" pdf="types" reading="Sec. 6.5">Types and Static Semantics</lecture>
    <lecture day="20" session="20" pdf="codegen">Code Generation</lecture>
    <lecture day="21" session="21" pdf="lambda">The Lambda Calculus</lecture>
    <lecture day="22" session="22">"</lecture>
    <lecture day="23" session="23" pdf="prolog">Prolog</lecture>
    <lecture day="23a">(turn in homework only)</lecture>
    <lecture day="24" session="24" pdf="final-review">Review for Final</lecture>
    <assignment due="5">Proposal</assignment>
    <assignment due="12">LRM, Parser</assignment>
    <assignment due="19">Hello World</assignment>
    <assignment due="8" pdf="hw1">HW1</assignment>
    <assignment due="11a" pdf="hw2">HW2</assignment>
    <assignment due="23a" pdf="hw3">HW3</assignment>
  </schedule>
  <csv-export-fields section="COMSW4115_001_2018_3 - PROGRAMMING LANG &amp; TRANSLATORS">
    <field name="hw1" canvasname="Homework 1 (213566)" points="100"/>
    <field name="hw2" canvasname="Homework 2 (218164)" points="100"/>
    <field name="mt" canvasname="Midterm (223259)" points="100"/>
    <field name="hw3" canvasname="Homework 3 (234077)" points="100"/>
    <field name="final" canvasname="Final (241988)" points="100"/>
  </csv-export-fields>
  <rubric average="82.5" averagegrade="3.330" fullgrade="14.3">
    <field name="hw1" weight="0.033"/>
    <field name="hw2" weight="0.033"/>
    <field name="hw3" weight="0.034"/>
    <field name="mt" weight="0.200"/>
    <field name="final" weight="0.300"/>
    <field name="report" weight="0.400"/>
  </rubric>
  <teams>
    <team name="AP++" description="List language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="MM">
      <student lname="Patel" fname="Amit" uni="ap3567" canvasid="300326" final="87" hw1="97" hw2="88" mt="94" hw3="96" report="85" grade="A-"/>
    </team>
    <team name="bawk" description="bad awk" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JH">
      <student lname="An" fname="Ashley" uni="aya2121" canvasid="290785" final="80" hw1="97" hw2="93" mt="92" hw3="100" report="94" grade="A-"/>
      <student lname="Hsu" fname="Christine" uni="chh2132" canvasid="290880" final="84" hw1="87" hw2="97" mt="94" hw3="100" report="94" grade="A"/>
      <student lname="Sawyer" fname="Mel" uni="ms5346" canvasid="293166" final="70" hw1="0" hw2="73" mt="78" hw3="97" report="94" grade="B"/>
      <student lname="Yang" fname="Victoria" uni="vjy2102" canvasid="292004" final="79" hw1="97" hw2="87" mt="94" hw3="100" report="94" grade="A-"/>
    </team>
    <team name="BitTwiddler" description="A language for binary data parsers" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="SE">
      <student lname="Martins" fname="Bruno" uni="bm2787" canvasid="287238" final="93" hw1="100" hw2="91" mt="94" hw3="96" report="90" grade="A"/>
    </team>
    <team name="Casper" description="MicroC with strings" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="SE">
      <student lname="Makris" fname="Michael" uni="mm3443" canvasid="302990" final="78" hw1="100" hw2="95" mt="80" hw3="100" report="83" grade="B+"/>
    </team>
    <team name="Coral" description="Python-like language with gradual typing" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="LA" star="true">
      <!-- Jacob Austin was the main mover and shaker on this project -->
      <student lname="Austin" fname="Jacob" uni="ja3067" canvasid="50524" final="81" hw1="95" hw2="96" mt="99" hw3="98" report="105" grade="A+"/>
      <student lname="Bowers" fname="Matthew" uni="mlb2251" canvasid="291600" final="93" hw1="100" hw2="100" mt="100" hw3="100" report="100" grade="A+"/>
      <!-- Rebecca had a concussion and will take the midterm late -->
      <student lname="Cawkwell" fname="Rebecca" uni="rgc2137" canvasid="289406" final="67" hw1="92" hw2="68" mt="98" hw3="96" report="100" grade="A-"/>
      <student lname="Miller" fname="Sanford" uni="skm2159" canvasid="291874" final="40" hw1="62" hw2="63" mt="91" hw3="81" report="100" grade="B"/>
    </team>
    <team name="FIRE" description="Fire Input Reinterpretation Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="JH">
      <student lname="Chan" fname="Ayer" uni="oc2237" canvasid="116648" final="75" hw1="83" hw2="67" mt="72" hw3="83" report="92" grade="B+"/>
      <student lname="Konikow" fname="Jason" uni="jk4057" canvasid="312193" final="76" hw1="49" hw2="57" mt="89" hw3="84" report="92" grade="B+"/>
      <student lname="Patterson" fname="Graham" uni="gpp2109" canvasid="45626" final="67" hw1="94" hw2="82" mt="84" hw3="85" report="92" grade="B+"/>
      <student lname="Spano" fname="Frank" uni="fas2154" canvasid="286121" final="48" hw1="97" hw2="56" mt="77" hw3="84" report="92" grade="B-"/>
      <student lname="Thomas" fname="Christopher" uni="cpt2132" canvasid="310420" final="56" hw1="85" hw2="75" mt="83" hw3="95" report="92" grade="B"/>
    </team>
    <team name="Fli-O" description="File I/O language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JH">
      <!-- Matt did the majority of the work; the others basically
	   flaked out -->
      <student lname="Chan" fname="Matthew" uni="mac2474" canvasid="374753" final="92" hw1="92" hw2="93" mt="96" hw3="94" report="80" grade="A-"/>
      <student lname="Cheruiyot" fname="Gideon" uni="gkc2112" canvasid="104072" final="36" hw1="48" hw2="45" mt="56" hw3="71" report="75" grade="C"/>
      <student lname="Gross" fname="Justin" uni="jg3544" canvasid="26766" final="67" hw1="30" hw2="74" mt="76" hw3="69" report="75" grade="B-"/>
      <student lname="Tefera" fname="Eyob" uni="et2546" canvasid="291080" final="66" hw1="96" hw2="89" mt="81" hw3="88" report="75" grade="B-"/>
    </team>
    <team name="GaE" description="Graphs Ain't Easy" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="DD">
      <student lname="Zeng" fname="Kevin" uni="ksz2109" canvasid="44314" final="89" hw1="100" hw2="87" mt="92" hw3="96" report="92" grade="A"/>
      <student lname="Jones" fname="Andrew" uni="adj2129" canvasid="290639" final="79" hw1="97" hw2="99" mt="98" hw3="90" report="92" grade="A-"/>
      <!-- dropped? 
	   <student lname="Delancey" fname="Jason" uni="jrd2172" canvasid="74582" final="0" hw1="0" hw2="33" mt="81" report=""  grade="" />
      -->
      <!-- Joined the class late -->
      <student lname="Nebel" fname="Samara" uni="srn2134" canvasid="74082" final="62" hw1="0" hw2="0" hw3="0" mt="79" report="92" grade="B-"/>
    </team>
    <team name="Grape" description="Graph Manipulation Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="DD">
      <student lname="Yoo" fname="Hyun Bin" uni="hy2506" canvasid="292529" final="82" hw1="33" hw2="68" mt="96" hw3="61" report="90" grade="A-"/>
      <student lname="Kolsby" fname="James" uni="jrk2181" canvasid="113564" final="66" hw1="97" hw2="91" mt="94" hw3="45" report="90" grade="B+"/>
      <student lname="Krasnoff" fname="Nick" uni="nsk2144" canvasid="38546" final="84" hw1="100" hw2="96" mt="89" hw3="100" report="90" grade="A-"/>
      <student lname="Wu" fname="Po-Yu" uni="pw2440" canvasid="292645" final="82" hw1="97" hw2="85" mt="93" hw3="100" report="90" grade="A-"/>
    </team>
    <team name="Graphiti" description="Graph Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.xz" slides="" ta="DD">
      <student lname="Hao" fname="Emily" uni="esh2160" canvasid="345980" final="81" hw1="60" hw2="94" mt="96" hw3="92" report="85" grade="A-"/>
      <student lname="Lee" fname="Sydney" uni="stl2121" canvasid="34284" final="82" hw1="92" hw2="87" mt="96" hw3="100" report="85" grade="A-"/>
      <student lname="Porubcin" fname="Michal" uni="mp3242" canvasid="108246" final="87" hw1="100" hw2="95" mt="93" hw3="84" report="85" grade="A-"/>
      <!-- Andrew really didn't contribute to the project -->
      <student lname="Quijano" fname="Andrew" uni="afq2101" canvasid="340679" final="66" hw1="97" hw2="91" mt="94" hw3="82" report="80" grade="B"/>
      <student lname="Thum" fname="Alice" uni="at3061" canvasid="93088" final="64" hw1="43" hw2="59" mt="84" hw3="78" report="85" grade="B"/>
    </team>
    <team name="Hippograph" description="High-Performance Parsing of Graphs" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JB">
      <student lname="Lewinter" fname="Benjamin" uni="bsl2121" canvasid="15610" final="80" hw1="89" hw2="96" mt="89" hw3="96" report="94" grade="A-"/>
      <student lname="Mateescu" fname="Irina" uni="im2441" canvasid="35534" final="82" hw1="90" hw2="87" mt="94" hw3="91" report="94" grade="A"/>
      <student lname="Smith" fname="Harry" uni="hs3061" canvasid="381558" final="85" hw1="97" hw2="100" mt="99" hw3="92" report="94" grade="A"/>
      <student lname="Watanabe" fname="Yasunari" uni="yw3239" canvasid="390425" final="78" hw1="100" hw2="99" mt="94" hw3="93" report="94" grade="A-"/>
    </team>
    <team name="IRIs" description="Workflow Description Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JH">
      <!-- Probably just Xuheng and Shulan -->
      <student lname="Gu" fname="Hanzhou" uni="hg2498" canvasid="381553" final="82" hw1="97" hw2="87" mt="99" hw3="86" report="80" grade="A-"/>
      <student lname="Li" fname="Xuheng" uni="xl2784" canvasid="372179" final="81" hw1="94" hw2="96" mt="97" hw3="92" report="90" grade="A-"/>
      <student lname="Tai" fname="Pinxi" uni="pt2508" canvasid="379493" final="76" hw1="58" hw2="89" mt="98" hw3="92" report="80" grade="B+"/>
      <student lname="TANG" fname="Shulan" uni="st3174" canvasid="373366" final="74" hw1="97" hw2="92" mt="95" hw3="100" report="90" grade="A-"/>
    </team>
    <team name="MathLight" description="Matrix manipulation language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JB">
      <student lname="Chen" fname="Mingye" uni="mc4414" canvasid="337517" final="75" hw1="97" hw2="96" mt="81" hw3="95" report="85" grade="B+"/>
      <student lname="Fu" fname="Chunli" uni="cf2710" canvasid="339036" final="88" hw1="97" hw2="100" hw3="95" mt="94" report="85" grade="A-"/>
      <student lname="Han" fname="Yuli" uni="yh2986" canvasid="337903" final="84" hw1="85" hw2="86" mt="86" hw3="96" report="85" grade="A-"/>
      <student lname="Song" fname="Boya" uni="bs3065" canvasid="334978" final="93" hw1="97" hw2="83" mt="97" hw3="95" report="85" grade="A"/>
    </team>
    <team name="MATRX" description="Matrix Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="DD">
      <student lname="Anderson" fname="Alana" uni="afa2132" canvasid="340678" final="79" hw1="100" hw2="93" mt="94" hw3="93" report="83" grade="A-"/>
      <student lname="Kieser" fname="Pearce" uni="pck2119" canvasid="106266" final="91" hw1="97" hw2="93" mt="99" hw3="96" report="83" grade="A"/>
      <student lname="Pfleger" fname="Katherine" uni="kjp2157" canvasid="296325" final="75" hw1="100" hw2="97" mt="97" hw3="92" report="83" grade="B+"/>
      <student lname="Sheth" fname="Julia" uni="jns2157" canvasid="293070" final="82" hw1="99" hw2="98" mt="93" hw3="95" report="83" grade="A-"/>
      <student lname="Sparks" fname="Nicholas" uni="ns3284" canvasid="369755" final="47" hw1="97" hw2="78" mt="91" hw3="76" report="83" grade="B-"/>
    </team>
    <team name="MMM" description="Image Matrix Manipulation Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="LA">
      <student lname="Jiang" fname="Shenghao" uni="sj2914" canvasid="379538" final="85" hw1="97" hw2="90" mt="100" hw3="92" report="85" grade="A-"/>
      <student lname="Ren" fname="Yixiong" uni="yr2344" canvasid="374817" final="95" hw1="97" hw2="96" mt="98" hw3="93" report="85" grade="A"/>
      <student lname="Wang" fname="Shikun" uni="sw3309" canvasid="377079" final="85" hw1="97" hw2="87" mt="97" hw3="95" report="85" grade="A-"/>
    </team>
    <team name="ProCSV" description="CSV File Processing Languages" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JW">
      <student lname="Chowdhury" fname="Tahiya" uni="tc2672" canvasid="65712" final="85" hw1="76" hw2="63" mt="89" hw3="75" report="80" grade="B+"/>
      <student lname="Nosiba" fname="Tabara" uni="tn2341" canvasid="271862" final="56" hw1="0" hw2="90" mt="92" hw3="79" report="80" grade="B-"/>
      <student lname="Saosun" fname="Tahsina" uni="ts2931" canvasid="102364" final="31" hw1="0" hw2="56" mt="57" hw3="75" report="80" grade="C"/>
    </team>
    <team name="PyLit" description="Python-like language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="JW">
      <student lname="Loprete" fname="Ryan" uni="rjl2172" canvasid="391662" final="71" hw1="81" hw2="82" mt="75" hw3="100" report="88" grade="B+"/>
    </team>
    <team name="SCoLang" description="Contract Fulfillment Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JB">
      <!-- Suspicious HW2:3 -->
      <student lname="Anand" fname="Sambhav" uni="sa3433" canvasid="295868" final="71" hw1="97" hw2="77" mt="90" hw3="89" report="80" grade="B"/>
      <student lname="Chen" fname="Jackson" uni="jc4697" canvasid="293041" final="83" hw1="100" hw2="96" mt="99" hw3="91" report="80" grade="A-"/>
      <student lname="Raman" fname="Sushanth" uni="sr3355" canvasid="291904" final="96" hw1="100" hw2="95" mt="99" hw3="100" report="80" grade="A"/>
      <student lname="Varahabhotla" fname="Varun" uni="vv2282" canvasid="341210" final="57" hw1="53" hw2="69" mt="54" hw3="96" report="80" grade="C+"/>
      <student lname="Vashisht" fname="Kanishk" uni="kv2295" canvasid="291456" final="85" hw1="97" hw2="96" mt="97" hw3="98" report="80" grade="A-"/>
    </team>
    <team name="Shoo" description="Imperative and functional language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JW" star="true">
      <!-- Claire also asking good questions -->
      <student lname="Adams" fname="Claire" uni="cba2126" canvasid="255752" final="96" hw1="100" hw2="100" mt="97" hw3="100" report="98" grade="A+"/>
      <!-- Smurdha was constantly asking good questions -->
      <student lname="Jayasinghe Mudi" fname="Samurdha" uni="sj2564" canvasid="31094" final="79" hw1="96" hw2="95" mt="96" hw3="90" report="98" grade="A"/>
      <student lname="Le" fname="Cindy" uni="xl2738" canvasid="346223" final="71" hw1="86" hw2="72" mt="83" hw3="96" report="98" grade="A-"/>
      <student lname="Ren" fname="Crystal" uni="cr2833" canvasid="97340" final="81" hw1="97" hw2="100" mt="97" hw3="100" report="98" grade="A"/>
    </team>
    <team name="SOSL" description="Set Operation Simplification Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="LA">
      <student lname="Chun" fname="Ryan" uni="ec3255" canvasid="340813" final="53" hw1="100" hw2="89" mt="86" hw3="83" report="73" grade="B-"/>
      <student lname="Grogan" fname="Garrison" uni="gg2652" canvasid="291116" final="58" hw1="33" hw2="73" mt="78" hw3="82" report="73" grade="C+"/>
      <!-- Ryan Koning really carried the group; the others didn't do much -->
      <student lname="Koning" fname="Ryan" uni="rjk2153" canvasid="84524" final="36" hw1="81" hw2="78" mt="62" hw3="98" report="100" grade="B-"/>
      <student lname="Maniar" fname="Trisha" uni="trm2144" canvasid="17940" final="79" hw1="89" hw2="86" mt="81" hw3="85" report="73" grade="B"/>
    </team>
    <team name="SSOL" description="Simple Shape Oriented Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="MM">
      <student lname="Farias" fname="Jeevan" uni="jtf2126" canvasid="54244" final="77" hw1="100" hw2="80" mt="87" hw3="92" report="85" grade="B+"/>
      <student lname="Mesko" fname="Daniel" uni="dpm2153" canvasid="48806" final="77" hw1="99" hw2="76" mt="81" hw3="78" report="85" grade="B+"/>
      <student lname="Tipp" fname="Madeleine" uni="mrt2148" canvasid="103830" final="69" hw1="40" hw2="86" mt="93" hw3="71" report="85" grade="B"/>
    </team>
    <team name="text++" description="PDF Generation Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="SE">
      <student lname="Anderson" fname="Joi" uni="jna2123" canvasid="17208" final="76" hw1="86" hw2="94" mt="86" hw3="96" report="85" grade="B+"/>
      <student lname="Javier" fname="Maria" uni="mj2729" canvasid="112280" final="88" hw1="86" hw2="98" mt="95" hw3="98" report="85" grade="A-"/>
      <!-- Output in HW1:Q2 that didn't match the source? -->
      <student lname="Padilla" fname="Klarizsa" uni="ksp2127" canvasid="340988" final="51" hw1="63" hw2="90" mt="76" hw3="86" report="90" grade="B-"/>
      <!-- Maria and Joi effectively shut up Klarizsa, telling her not to work on the code, called her names,
           etc.  Klarizsa said not to mention it to them. -->
    </team>
    <team name="Tree++" description="Tree Manipulation Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="JW">
      <student lname="Costa" fname="Allison" uni="arc2211" canvasid="80062" final="85" hw1="70" hw2="100" mt="91" hw3="100" report="78" grade="B+"/>
      <!-- Laura disappeared for much of the semester, but eventually reappeared. -->
      <student lname="Matos" fname="Laura" uni="lm3081" canvasid="86508" final="74" hw1="30" hw2="63" mt="66" hw3="74" report="78" grade="B-"/>
      <student lname="Penn" fname="Jacob" uni="jp3666" canvasid="296318" final="52" hw1="0" hw2="0" mt="71" hw3="79" report="78" grade="C"/>
      <student lname="Smerling" fname="Laura" uni="les2206" canvasid="89758" final="64" hw1="66" hw2="74" mt="88" hw3="75" report="78" grade="B-"/>
    </team>
    <team name="Typescript-on-LLVM" description="Statically-typed scripting without the browser" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="" ta="SE">
      <student lname="Pandya" fname="Ratheet" uni="rp2707" canvasid="34110" final="72" hw1="96" hw2="82" mt="56" hw3="97" report="83" grade="B-"/>
    </team>
    <team name="Uni-Corn" description="Hardware Description Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="SE">
      <!-- Gael reports only Lalo, Maryam, and Gael have really contributed -->
      <!-- FIXME -->
      <student lname="Aly" fname="Maryam" uni="mya2114" canvasid="110770" final="79" hw1="50" hw2="99" mt="80" hw3="94" report="94" grade="A-"/>
      <student lname="Awwal" fname="Adiza" uni="asa2201" canvasid="108498" final="46" hw1="70" hw2="72" mt="59" hw3="78" report="94" grade="C+"/>
      <student lname="Lalo" fname="David" uni="djl2178" canvasid="290966" final="58" hw1="95" hw2="98" mt="94" hw3="100" report="98" grade="A-"/>
      <student lname="Sendik" fname="Dan" uni="drs2176" canvasid="251676" final="32" hw1="50" hw2="80" hw3="0" mt="59" report="94" grade="C"/>
      <student lname="Zendejas" fname="Gael" uni="gz2255" canvasid="309988" final="63" hw1="33" hw2="93" mt="93" hw3="88" report="90" grade="B+"/>
    </team>
    <team name="VSCOde" description="Image Manipulation" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="MM">
      <student lname="Cheng" fname="Jessica" uni="jc4687" canvasid="291239" final="72" hw1="83" hw2="79" mt="98" hw3="94" report="85" grade="B+"/>
      <student lname="Lu" fname="Anna" uni="ajl2256" canvasid="290674" final="91" hw1="93" hw2="99" mt="100" hw3="96" report="85" grade="A"/>
      <student lname="Mizuta" fname="Hana" uni="hm2694" canvasid="291161" final="88" hw1="93" hw2="96" mt="97" hw3="91" report="85" grade="A-"/>
      <student lname="Yen" fname="Spencer" uni="ssy2121" canvasid="291920" final="93" hw1="96" hw2="96" mt="97" hw3="91" report="85" grade="A"/>
      <student lname="Yuan" fname="Kenneth" uni="kky2114" canvasid="291428" final="93" hw1="100" hw2="99" mt="95" hw3="100" report="85" grade="A"/>
    </team>
    <team name="ZEN" description="Graphics Language" proposal="pdf" lrm="pdf" report="pdf" files="tar.gz" slides="pdf" ta="MM">
      <student lname="Gordin" fname="Zoe" uni="zeg2103" canvasid="99556" final="74" hw1="78" hw2="71" mt="81" hw3="68" report="87" grade="B+"/>
      <student lname="Murguia" fname="Eleanor" uni="egm2142" canvasid="107682" final="69" hw1="63" hw2="78" mt="93" hw3="71" report="87" grade="B+"/>
      <student lname="Saleh" fname="Nadia" uni="ns3059" canvasid="102030" final="67" hw1="0" hw2="79" mt="86" hw3="67" report="87" grade="B"/>
    </team>
    <!-- comp exam taker -->
    <!--
	<student lname="Lee" fname="Fei-Tzin" uni="fl2301" final="72"  grade="" />
    -->
  </teams>
  <printing>
    for file in *.pdf ; do acroread -toPostScript $file ; done

    for file in *.ps ; do lpr -Pmonochrome -o sides=two-sided-long-edge $file ; done
  </printing>
  <gradescope>
    Print single-sided; scan double-sided. Or perhaps leave lots of blank space?

    Load double-sided outline (i.e., with blank pages corresponding to what
    the scan will produce)

    Add appropriate-size boxes for "put answer here"

    Doubling-up CVN submissions:

    pdftk loprete_ryan391662_question_181738_3537885_2018_10_17_18_29_42.pdf cat 1 1 2 2 3 3 4 4 5 5 output loprete.pdf
        
  </gradescope>
  <presentations>
    Fli-O:  File I/O language.  Files and directories are native
      types.  Originally wanted to also do string operations, but
      ultimately decided to work just on file manipulation.  Standard
      library linked in to the LLVM.  Top-level code, etc.,
      automatically moved into an implicit main function.  Forking and
      doing a system call.  Some string operations; no operator
      overloading.  Demo: copy a file, open it, and write line numbers
      on each string.  String manipulation done with C functions;
      malloc, but no free.

      Seems like they ran out of time; wanted to do lots more, but it
      doesn't do much in the end.  Couldn't do much with directories,
      no arrays, etc.   "Teamwork could have been better"

   IRIs: Workflow description language.  Inspired by "Alfred"
      workflows.  Obviously practiced the presentation.  Nifty
      timeline.  Strings, lists, and tuples.  Pipes.  variable1 | variable2,
      variable1 | function (pass one variable to a function).
      tuple | function (pass multiple arguments).  Lists are
      implemented as a C function: array is malloc'ed larger than
      necessary, and may grow and be reallocated.  Strings are
      immutable, placed on the heap.  Tuples uses LLVM's struct
      support, but they didn't get it working completely (returning
      tuples?).  Their pipes are effectively function composition.
      Demos: binary search in an array; calculate tip amount; get some
      data from the user and send email through a system call; even a
      little gui (call C code).

      Got it.  Not the fanciest language, but they took a core idea
      (pipes) and ran with it.  Demonstrated that they saw how things
      could go together.

   MATRX: Matrix manipulations, designed for machine learning.
      Matrices and strings built-in.  Added clang to the Docker base I
      distributed with MicroC.  Overleaf for documents.  Very C-like
      syntax.  Matrix literals.  2D matrices, integer only.  Obviously
      had much larger ambitions than what they ultimatly built.
      Static sized.  Mostly C library implementation.  A matrix is a
      struct (row count, column count, pointer to pointers, and "build
      position").  Struggled with OCaml, as usual.  Unpracticed
      presentation.  Demo basically showed things working; no real
      algorithm.

      Obviously bit off more than they could chew.  Reasonable
      language design, but not stunning.

   Shoo: Imperative and functional language.  Go-like.  First-class
     functions, arrays, and structs.  Nested function definitions.
     Lifted first-class functions (added a pass to do this) up to the
     top level.  Demo 1: uses structs, functions, and arrays.  Bank
     accounts, then apply a function.  A little mechanical, but
     definitely nice.  Demo 2: bubble sort with a "compare" function
     passed in to it, although their type system doesn't really allow
     much polymorphism.  Demo 3: Sudoko solver; just a brute-force
     search.  Demo 4: Print large ASCII characters.  Array of array of
     strings of characters; glued together.  Constructs closures
     (creates a struct with all the captured variables) that include
     an index to which function they belong.  Copies free variables
     into environment objects, which have references.  Inspired by
     Justin's project.  Weren't sure how they were passing around
     closures (e.g., how it interacted with the stack).  Everything
     malloc'ed but never freed.
   
     Excellent.
     
   Coral: Python with some type annotations.  A mix of static types and dynamic
     types.  Fancy runtime to support this.  Actually a proper Python subset
     so they can run bare programs in Python.  Types aren't bound to names;
     they're bound to expressions.  They have first-class functions, but don't
     have closures by only allowing global variable references.  No
     classes.  But clever rules for when they convert things to and
     from the dynamic type implementation.  Import mechanism.
     Indentation-aware; inserts indent and dedent tokens.  Rather a
     hack.  Python 3.7 actually does handle type annotations, but
     ignores them.  Does some type inference, but not full-blast.
     Demo: just examples of their type optimizations (GCD).  And they
     built an interpreter.  Even a REPL?  More for testing.

     Amazing.  Probably mostly Jacob, some Matt.

   MathLight: Matrix manipulation language.  C-like syntax.  Matrix
     literals.  Too many built-in functions written in C.  Naive type
     checking: recursing on functions to make sure they have the
     dimensions of matrices.  Demo: linear regression, both solving
     the thing analytically and by doing some sort of gradient
     descent.  Truly unremarkable.

   SSOL: Simple shape oriented language. Rendering shapes in SVG
     format.  C-like language.  MicroC + Arrays, strings.  Curves,
     points.  Curves take four (control) points.  Canvas type:
     dimensions with a list of curves.  "canvas |= curve |= curve"
     appends things to the canvas.  Did struct types, but not
     user-defined struct types.  Had some problems with arrays,
     structs on the lhs of assignment.  Draw() function takes a canvas
     and filename; generates an SVG of nothing but curves.  Demo:
     Fibonacci spiral.  Reasonable, but hardly stunning.

  GaE: Graphs Ain't Easy.  Nodes and points.  Arrays and maps.
    Limitation on the types than can be put in an array.  Maps are
    dictionaries, but only string, int, and chars keys.  Most things
    are malloc'ed.  Structs and struct literals.  Edges consist of
    source, destination, and values.  Types must be named structs.
    Sort of like C++ templates for polymorphism.  Structs are actually
    stored as linked lists whose elements are value, name pairs.  Lots
    of linear list searching.  Demo: Dijkstra's algorithm (shortest
    path; sort of relaxation-based).  Also, Colatz conjecture (n/2
    vs. 3n + 1).  "Kevin probably did a little bit more"  Looks like a
    good team effort.

    Reasonable.

  VSCOde: Tried to do edge detection.  Image: Struct of three
    matrices.  Happy group; seems like they got it working.  Semantic
    checking issues with matrices.  Both dimensioned and undimensioned
    matrix types.  Started from MicroC, added plenty.  Array literal
    allocated on the stack.  Looks like they alloca matrices on the
    stack and then return them as copies.  Array bounds checking at
    compile-time?  They didn't quite understand what was going on.
    Could only really handle fixed-sized arrays.  Ultimately required
    images to be 50 x 50.  Blur, etc. functions are just implemented
    in C.  Unrolled copy functions; blew up LLVM.  Only tested on
    small matrices to begin with.  They understood that they should
    have done things on the heap and not unrolled everything.

    Made a bunch of really poor decisions about the kind of code to
    generate.  Barely working by demo time.

*** Should really talk to the class about knowing things at compile-time and
*** runtime and the implications about types, codegen, etc.

  Hippograph: Graph theory.  Inspired by Jennifer Bi's giraph language
    from last year.  Overleaf for the report.  Docker and VM.  Seemed
    to work well as a team.  C-like imperative language.  Both
    imperative and expression-style function definitions.  Nested
    function definitions with accessing local variables in enclosing
    scopes.  Interesting syntax for graph literals.  Interesting
    runtime data structure for graphs (lots of lists).  Graph types
    include types of node labels, weights, etc.  Demo: Bellman-Ford.
    For "node n in graph" iteration loops.

  ZEN: Graphics language: fractals, etc.  Wore their custom T-shirts
    and gave me one.  Arrays, tuples, strings, shapes (external SIGIL
    library linked in; built on SDL).  Issue with how to check the output since
    SIGIL just displayed images on windows.  Docker was a problem
    because of graphics; ultimately went with the VM.  MicroC plus
    some simple graphics built-ins.  Demo draws a Sierpinski triange
    and some other junk; straightfoward.  C-style arrays (dimensions
    need be passed along with types).  Tuples are pairs of floats;
    allocated on the stack with alloca.  Passable: reasonable but
    little more than just MicroC plus some stuff.

  Uni-Corn: Java-like Hardware Description Language.  "Uni-corn"
    because there's only one data type.  Modules, registers, loops,
    buses (binary vector), and combinational gates.  Register notation
    q := d * initial value *  "Fill Modules" instantiates modules;
    "Harden" fixes types.  Expand expressions.  Then generate a
    netlist, topological sort, then generate code.  All kinds of
    debugging information can be generated (one for each stage).
    Generates a tick() function with external variables for inputs,
    etc.  Managed to use multiple git repositories.  Lots of testing:
    Maryam.  Demo: ALU with multiple operations (mux selecting
    operation), parameterized by number of bits.  They actually
    followed my instructions.

    Good final report.  Group strife.

    "This is like a Greek tragedy: you're told everything that will
    happen, you say it won't happen to me, then it happens anyway"


  FIRE: File input language.  Sort of an awk-like data processing
    language.  Associative arrays.  File I/O, associative arrays,
    regex, map over values and filter by a Boolean predicate.  Binary
    trees and heaps.  Dragon Heap: read the dragon book and sort by
    word length.  Passing functions around.  Tokenizer example.
    The values can themselves be associative arrays.  Maximal munch
    implementation.  C library; associative arrays are just linked
    lists.  Statically typed.  Demo: lexer for their own language
    (sort of).  Runs from a few configuration files.   Nicely done.

  MMM: Matrices.  C-like.  Structs.  openCV to read and write images
    as well as convolution.  Git commit log: bumps at beginning, Hello
    World, and at the end.  Int, float, bool, and strings.  Matrix and
    struct types.  Matrix: 2D float array.  Matrix declarations with
    literals and empty (all zeros).  Matrix slicing (sort of like
    Matlab).  Convolution expanded to explicit operations in LLVM.
    struct matrix { double *array; int x; int y; }  Fell into the same
    trap as VSCODe: type system appears to need array dimensions.
    E.g., reading an image involves specifying its size at
    compile-time.  Matrices allocated on the heap.  Can't return
    structs.  cov_openCV() passes the dimension of the matrix.  Demo:
    some image manipulation, a mix of openCV calls and things done in
    their language.  Extraordinarily slow for some reason.  Unrolling
    loops for initializing matrices, it seems.

  ProCSV: MicroC-based.  Statically typed.  Int, float, bool, string.
    Usual operators, pre- and post-increment/decrement.  Doesn't seem
    like it actually brings the CSV data?  find() finds a line with a
    particular pattern and returns a string.  Made some bad choices
    about what to pursue (read previous team projects?).   Dumb demo:
    mostly just calls their C functions.

  SCoLang: Smart Contract Language.  Listener triggers actions.
    Listeners typically listen on ports.  Runs all the listeners in
    parallel as separate processes; fork() called to invoke them all.
    No shared state, variable, etc.  Rather a simple, brute-force
    concurrency model.  They wanted to chain contracts, but they didn't
    do this.  Wait for a connection on a port (but drops the connection
    after it); send an http get/post request.  Most work is done by
    their bind() function, which just forks a process.  Claim they
    split the work evenly.  Really fell short in what the system can
    do in the end.  Demo is cute (turn on a light, play a music), but
    really just calls three C functions.

  text++: PDF generator.  C-like syntax; TeX-inspired.  Text, font,
    color.  Built on Haru PDF library.  MicroC base.  Nice slides;
    obviously practiced the presentation.  write() is high-level;
    textout() is low-level.  moveTo() moves the write() output cursor.
    bold(), italic(), regular().  left(), center(), and right()
    alignment.  changeColor(); changeFontSize(); drawLine();
    drawRectangle().  table() function draws a rectangle and divides it
    into rows and columns.  Demo: coded on the fly.  Recreated the
    appearance of my first homework assignment.  Didn't really do much
    algorithmic stuff in the demo.

  Casper:  MicroC plus strings, characters, while, math primitives,
    strings with _ for concatenation and ? for character-at. ~
    converts numeric types.  break; continue.  do-until.  No slides
    prepared.  Didn't get to arrays.  Demo: Binary search of a string
    (but not sorted?)  Sieve of Eratosthenes, using a string to keep
    track of what is and is not prime (bizarre array).  Runs very
    quickly with primes under 100, but uses a breathtaking amount of
    memory since it never cleans up unused strings.

  bawk: AWK-like language, but a little more verbose.
    Multidimensional arrays.  Same "walk over each line of input"
    semantics as awk.  BEGIN LOOP END CONFIG blocks.  Strings, regular
    expressions, strings, arrays.  Arrays are implemented as linked
    lists.  Also have $0, $1, etc. as in awk.  Used the POSIX C regex
    library.  Put the loop-over-file-lines functionality in their C
    library.  Demo: unshuffle an ASCII art file and strip out some
    embedded words, some matrix operations.

    Solid, not stunning.

  Grape: Graph language.  Graph literal notation.  Edges, Nodes,
    Lists, and Graphs.  Lists can be nested.  Demo: simulating a DFA.
    Their standard library has a "dfa" library that simulates a DFA
    when given an input string.  Lists are very helpful.  Scanning
    input strings.

    Seems to be working, but something's strange.  Something odd about
    arrays?

  Graphiti: Inspired by Neo4J from databases.  C-like language.  list,
    map, graph.  Polymorphic Linked lists.  Maps: dictionaries
    implemented as linked lists.  Graph nodes are maps.  Represented
    internally as a list of nodes with lists of successors.  Things
    like adding edges to a graph is costly.  Used the VM.  Demo: build
    a fully connected graph without loops.  Demo: family tree.  graph
    union and intersection written in C.  Didn't have any interesting
    graph algorithms like Dijkstra because they could only label edges
    with strings.
  
  Tree++: Nodes in trees.  "Gap between final output and semester long
    work."  Large C library.  Nodes are a set of things of a
    particular type.  Ordered children under each node.  C library for
    manipulating nodes.  Demo: Call a few C library functions.

    Struggling fiercely at the last minute.  Apparently built
    a compiler or two, then threw it away and restarted with
    MicroC.  Kept trying, giving up, and restarting.

  SOSL: Set operations.  Operators like union, intersection,
    complement, etc.  Sets of integers, characters, strings, and of
    sets.  C-like syntax.  Set manipulation done with C library
    functions.  Some bizarre choices in their type system.  Virtually
    nothing working in the end.

  CVN groups:

  AP++: MicroC plus polymorphic lists (literals, size, push, get, pop,
    insert, find, remove, slice, rev, clear).  Slicing syntax x[1:4].
    Assignment x[3] = 2.   Coded all the standard library routines in
    LLVM instructions in the code generator!  Passable.
    
  BitTwiddler: Bit-level data manipulation.  Ran out of time.
    "Variables with no initializer are read from stdin"  Match
    (switch) statements.  Nice final report.
  
  PyLit: Python-like language, but indentation isn't significant.
    Strings; barely.  Underwhelming.
  
  Typescript-on-LLVM: Arrays (look like C arrays).  Array incides must
    be literals?  Underwhelming.
    
</presentations>
  <team-comments>
Jennifer Wenjun Bi

My group SOSL has some group strife. One member (Trisha) has barely
contributed. The manager of the group, Ryan K, trying to give her an
easy task, asked her to write tests, and she just wrote 3. This was
around the time of Hello World, but I doubt she has caught up since
then to contribute more. Ryan K has put a tremendous amount of effort
into the project. He doesn't have a great grasp of the material but,
being responsible, brute-forced his way through debugging their Hello
World on his own. He tried to rally the team, asking his teammates to
show up to Office hours to ask questions, but they didn't do that. The
other two members, Ryan C and Garrison have (somewhat?) better coding
ability but seem to flake out until the last minute. I've discussed
this over email/in OH with Ryan K, will forward it to you.

My other group ScoLang is a group of friends, and it seems like some
of them are carrying the team (and ok with it). I haven't seen Sambhav
and Sushanth for most of the semester. Jackson and Kanishk ask all the
design/implementation questions. Varun is the manager and comes to
meetings but does not ask technical questions. If their git history
doesn't support my observations and they're actually all contributing,
you can disregard my observations.

John Zhuang Hui

FIRE (Ayer Chan, Jason Konikow, Graham Patterson, Frank Spano,
Christopher Thomas): they're all active contributors to the project,
with Graham leading the charge (in a exactly the way a manager
should). They have regular code sprints where they get together, and
their GitHub has a bunch of healthy activity as well, with PRs and
reviews coming from everyone. This was probably my best group. 

bawk (Ashley An, Christine Hsu, Mel Sawyer, Victoria Yang): they
needed a bit of hand-holding sometimes, and were a little less
organized, but they each put in a balanced and commendable effort
towards the project. They're very receptive to feedback, and have
managed to delegate ownership of work on each stage of the compiler
pipeline, while also doing a bit of jumping around and helping with
the other parts.

Fli-O (Matthew Chan, Gideon Cheruiyot, Justin Gross, Eyob Tefera):
This is pretty much Matt's project. As far as I am aware, he
single-handedly wrote the entire project. Eyob has made a genuine
effort towards codegen, but is still getting tripped up by OCaml, and
does not seem to have a good idea of what is going on in semant. Gideon
has maybe written just a handful of test cases, which he never
actually ran because this was before they had a full pipeline
working. Justin has been MIA since Election Day weekend, and even
before that has been off the grid. So basically, massive kudos to Matt
for hauling together what looks like a working compiler, but it
definitely was not a team effort. 

IRIs (Hanzhou Gu, Xuheng Li, Shulan Tang, Pinxi Tai): It is hard to
tell what is going on with this group. They seldom respond to any
advice or help I offer, so engagement is strictly limited to the
formalities of very awkward weekly meetings. Every meeting, it's
mostly Xuheng doing the talking. Shulan usually follows up with
questions, so she's probably pulling her weight as well. But the other
two have barely said a word all semester, and are usually browsing the
web during our meetings.

Justin Wong

Although it's already been on the record, Lauren Matos (lm3081) has
not made any meaningful contribution as far as I've seen.


Ryan Jay Koning

I feel the need to bring this up as I watch another terrible test
score come across my screen and contemplate the gross disparity of
effort and responsibility for my team's compiler. which has clearly
come at the expense of my test grades, and my other classes' grades. I
have raised this concern with Jennifer (my group's TA) throughout the
semester and she can verify that this has been an ongoing concern of
mine that we have attempted to address to little avail.

I'll be frank, our language is going to be mediocre at best, because
unless a task is a 't' that needs crossing or an i that needs dotting,
there is no concern for it from the other team members. If they say
they will do something; it usually doesn't get done. And If they don't
know how, they won't go figure it out.  This means I have to figure it
out a week after it should have been done or the project doesn't
move. This eventually led to me bearing the weight of all the
roles. Because of this, the project is likely do my already suffering
grade no favors. However, I'd like you to know where all my sustained
effort for this class went and what I think about it.

I have a SaaS company outside of Columbia with investors to answer to
as well as other classes to attend. This situation is egregiously
unfair.

Dean Deng

Andrew Quijano on Team Graphiti has been extremely difficult for the
group to work with for the entire semester. From our first meeting, he
was focused on the C library without any thought for any of the other
parts of the language. Even after I advised against it repeatedly,
Andrew worked on implementing the C library before anything else was
even built. Though his groupmates never complained about him to me, it
was apparent that there was a lot of disagreement between him and the
rest of the group over how to design their language. His focus on C
ended up being a major roadblock at the end of the semester: he was
barely able to contribute to the OCaml code (two weeks ago, he asked
me how to return from an OCaml function), and the C code that he wrote
was not compatible with the rest of the project. His partners had to
fix/rewrite most of his code. I genuinely believe that Andrew
contributed to the project negatively overall.

</team-comments>
  <ranking>
  100
    Coral	Unreal: gradual typed Python; tackled many tricky issues.

  98
    Shoo        Tackled serious language design and implementation issues.

  94    
    Uni-Corn	Seems like they actually followed my instructions and got it
    Hippograph	Reasonable graph language; for_node
    bawk	Nice, solid language, albeit straightforward.

  92
    FIRE	Got it: tokenizer program for their own language; nice features
    GaE		Reasonable graph language; inefficient runtime.

  90
    IRIs	Innovative design, but rather crazy.
    BitTwiddler	Good idea; tried, but fell a little short
    Grape	Mostly working graph language.
    
  87
    ZEN		Reasonable graphics language; nothing special
   
  85
    text++	Working but not much there.
    VSCOde	Passable matrix language; made some bad implementation choices
    MMM		Passable matrix language
    SSOL	Passable drawing language    
    MathLight	Passable matrix language    
    AP++	MicroC plus lists.  Runtime written in OCaml LLVM.    
    Graphiti	Unimpressive graph language; could do a little    
    PyLit	Unremarkable.  MicroC with some tweaks.


  83
    Typescript-on-LLVM MicroC with some tweaks.
    Casper	Really just MicroC plus strings and a lot of fussy additions
    MATRX	Obviously ran out of time.  Unremarkable demo.
    
  80    
    Fli-O	Average: tried, didn't make it.  Group strife: only Matt
    SCoLang	Really doesn't do much; C library function calls fork()
    ProCSV	What happened?  They could call a few C library functions

  78
    Tree++	Trainwreck.  Worked OK together but didn't produce much
    SOSL	Nothing much to show
    
  </ranking>
  <bad-advice>
    Implement your scanner completely before testing it or starting on
    the parser.

    Just do unit tests; when you put things together, everything will
    work fine.

    "This is like a Greek tragedy: you're told everything that will
    happen, you think it won't happen to me, then it happens anyway"    
    
  </bad-advice>
</class>
